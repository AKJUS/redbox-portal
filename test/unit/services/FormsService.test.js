

describe('The FormsService', function () {
  before(function (done) {
    done();
  });

  it('should return the default RDMP form', function (done) {
    var brand = BrandingService.getDefault();
    var recordType = 'rdmp';
    var formName = 'default-1.0-draft';
    RecordType.find().then(forms => {
      sails.log.verbose(`going to look for ${brand.id}_${recordType}`);
      sails.log.verbose(forms);
    });
    console.log('brand.id '+brand.id+' recordType '+recordType);
    FormsService.getFormByStartingWorkflowStep(brand, recordType, true).subscribe(function(form) {
      expect(form).to.have.property('name', formName);
      done();
    })
  });

  it('should get dataPublication-1.0-embargoed form', function (done) {
    
    var formName = 'dataPublication-1.0-embargoed';

    FormsService.getFormByName(formName, true).subscribe(function(form) {
      console.log(form)
      expect(form).to.have.property('name', formName);
      done();
    })
  });

  it('should return the form based of a given record', function (done) {
    let brand = BrandingService.getDefault();
    let formName = 'default-1.0-draft';
    let record = {
      metaMetadata: {
        form: formName,
        type: 'rdmp'
      }
    };
    FormsService.getForm(brand, '', true, '', record).then(form => {
      expect(form).to.have.property('name', formName);
      done();
    })
  });

  it('should return the autogenerated form based of a given record', function (done) {
    let brand = BrandingService.getDefault();
    let formName = 'generated-view-only';
    let record = {
      metaMetadata: {
        form: formName,
        type: 'rdmp'
      }
    };
    FormsService.getForm(brand, '', true, '', record).then(form => {
      expect(form).to.have.property('name', formName);
      done();
    })
  });

  it('should return the form', function (done) {
    let brand = BrandingService.getDefault();
    let formName = 'default-1.0-draft';
    FormsService.getForm(brand, formName, true, 'rdmp', {}).then(form => {
      expect(form).to.have.property('name', formName);
      done();
    })
  });

  it('should return the autogenerated form', function (done) {
    let brand = BrandingService.getDefault();
    let formName = 'generated-view-only';
    FormsService.getForm(brand, formName, true, 'rdmp', {}).then(form => {
      expect(form).to.have.property('name', formName);
      done();
    })
  });

});
